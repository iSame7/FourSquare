//
//  DetailsBuilder.swift
//  FourSquare
//
//  Created Sameh Mabrouk on 25/05/2019.
//  Copyright Â© 2019 VanMoof. All rights reserved.
//
//  Template generated by Sameh Mabrouk https://github.com/iSame7
//

import Swinject

class DetailsBuilder: DetailsBuilding {
    private let container: Container
    
    init(container: Container) {
        self.container = container
    }
    
    func buildModuleWith(venue: Venue, venuePhotoURL: String?) -> FourSquare.Module? {
        registerView(with: venue, venuePhotoURL: venuePhotoURL)
        registerInteractor()
        registerMapURLHandler()
        registerRouter()
        registerPresenter()
        
        guard let detailsViewController = container.resolve(DetailsViewable.self) as? UIViewController else { return nil }
        
        return FourSquare.Module(viewController: detailsViewController)
        
    }
    
    func registerView(with venue: Venue, venuePhotoURL: String?) {
        container.register(DetailsViewable.self, factory: { _ in
            DetailsViewController.instantiate()
        }).initCompleted({ (r, view) in
            if let detailsViewController = view as? DetailsViewController {
                detailsViewController.presenter = r.resolve(DetailsPresenting.self)!
                detailsViewController.viewModel = DetailsViewController.ViewModel(venue: venue, venuePhotoURL: venuePhotoURL)
            }
        }).inObjectScope(.container)
    }
    
    func registerMapURLHandler() {
        container.register(MapURLHandling.self, factory: { r in
            MapURLHandler()
        }).inObjectScope(.container)
    }
    func registerPresenter() {
        container.register(DetailsPresenting.self, factory: { r in
            DetailsPresenter(view: r.resolve(DetailsViewable.self)!, interactor: r.resolve(DetailsInteracting.self)!, mapURLHandler: r.resolve(MapURLHandling.self)!, router: r.resolve(DetailsRouting.self)!)
        }).inObjectScope(.container)
    }
    
    func registerInteractor() {
        container.register(DetailsInteracting.self, factory: { r in
            DetailsInteractor(venueService: r.resolve(VenueFetching.self)!)
        }).initCompleted ({ (r, interactor) in
            if let detailsInteractor = interactor as? DetailsInteractor {
                detailsInteractor.presenter = r.resolve(DetailsPresenting.self)
            }
        }).inObjectScope(.container)
    }
    
    func registerRouter() {
        container.register(DetailsRouting.self, factory: { r in
            DetailsRouter(tipsModuleBuilder: r.resolve(TipsBuilding.self))
        }).inObjectScope(.container)
    }
}
